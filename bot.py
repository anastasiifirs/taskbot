import csv
import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger

USERS_FILE = "users.csv"
TASKS_FILE = "tasks.csv"

scheduler = BackgroundScheduler()
scheduler.start()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
TASK_TEXT, CHOOSE_USER, DEADLINE_DATE, DEADLINE_TIME, CHOOSE_USER_FOR_ROLE, CONFIRM_ROLE_CHANGE = range(6)
ADD_USER, SET_ROLE_USER, SET_ROLE_CHOICE, SET_CHIEF_USER = range(6,10)

# --- –†–∞–±–æ—Ç–∞ —Å CSV ---
def load_csv(filename, fieldnames):
    if not os.path.exists(filename):
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
        return []
    with open(filename, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def save_csv(filename, data, fieldnames):
    with open(filename, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

def load_users():
    return load_csv(USERS_FILE, ["tg_id", "role", "chief_id"])

def save_users(users):
    save_csv(USERS_FILE, users, ["tg_id", "role", "chief_id"])

def load_tasks():
    return load_csv(TASKS_FILE, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

def save_tasks(tasks):
    save_csv(TASKS_FILE, tasks, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard(role):
    if role == "chief":
        buttons = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
    else:
        buttons = [
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö ---
async def send_deadline_reminder(context):
    data = context.job.data
    await context.bot.send_message(
        chat_id=data["chat_id"],
        text=f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ó–∞–¥–∞—á–∞ '{data['task_text']}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ {data['deadline']}"
    )

def schedule_deadline_reminders(task_id, chief_id, assignee_id, task_text, deadline_str):
    deadline = datetime.datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
    reminders = [
        ("1_day", deadline - datetime.timedelta(days=1)),
        ("1_hour", deadline - datetime.timedelta(hours=1)),
        ("after_deadline", deadline + datetime.timedelta(hours=1))
    ]
    for name, run_time in reminders:
        if run_time > datetime.datetime.now():
            chat_id = assignee_id if name != "after_deadline" else chief_id
            display_deadline = deadline_str if name != "after_deadline" else f"{deadline_str} (–ü–†–û–°–†–û–ß–ï–ù–û)"
            scheduler.add_job(
                send_deadline_reminder,
                DateTrigger(run_date=run_time),
                kwargs={"data":{"task_id":task_id,"chat_id":chat_id,"task_text":task_text,"deadline":display_deadline}}
            )

# --- –°—Ç–∞—Ä—Ç –∏ –ø–æ–º–æ—â—å ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"]==tg_id), None)
    if not users:
        users.append({"tg_id":tg_id,"role":"chief","chief_id":""})
        save_users(users)
        keyboard = get_main_keyboard("chief")
        await update.message.reply_text("üë®‚Äçüíº –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ù–ê–ß–ê–õ–¨–ù–ò–ö.", reply_markup=keyboard)
        return
    if not user:
        chief_id = next((u["tg_id"] for u in users if u["role"]=="chief"), "")
        users.append({"tg_id":tg_id,"role":"manager","chief_id":chief_id})
        save_users(users)
        keyboard = get_main_keyboard("manager")
        await update.message.reply_text("üëã –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ú–ï–ù–ï–î–ñ–ï–†.", reply_markup=keyboard)
    else:
        keyboard = get_main_keyboard(user["role"])
        await update.message.reply_text(f"üîë –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã {user['role']}.", reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"]==tg_id), None)
    if not user: return
    if user["role"]=="chief":
        text = ("üë®‚Äçüíº –ù–∞—á–∞–ª—å–Ω–∏–∫:\nüìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\nüìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\nüîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚ûï /add_user\n‚öôÔ∏è /set_role\nüëë /set_chief")
    else:
        text = "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä:\nüìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n‚ùì –ü–æ–º–æ—â—å"
    await update.message.reply_text(text)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"]==tg_id), None)
    if not user or user["role"]!="chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ TG ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return ADD_USER

async def add_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_id = update.message.text
    users = load_users()
    if any(u["tg_id"]==new_id for u in users):
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return ConversationHandler.END
    chief_id = str(update.effective_user.id)
    users.append({"tg_id":new_id,"role":"manager","chief_id":chief_id})
    save_users(users)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥ –≤–∞—à–∏–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º")
    return ConversationHandler.END

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ ---
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"]==tg_id), None)
    if not user or user["role"]!="chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ TG ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —á—å—é —Ä–æ–ª—å —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    return SET_ROLE_USER

async def set_role_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text
    users = load_users()
    target = next((u for u in users if u["tg_id"]==user_id), None)
    if not target:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    context.user_data["set_role_user_id"] = user_id
    role_options = InlineKeyboardMarkup([
        [InlineKeyboardButton("manager", callback_data="role:manager"),
         InlineKeyboardButton("chief", callback_data="role:chief")]
    ])
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {user_id}:", reply_markup=role_options)
    return SET_ROLE_CHOICE

async def set_role_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    new_role = query.data.split(":")[1]
    user_id = context.user_data["set_role_user_id"]
    users = load_users()
    target = next((u for u in users if u["tg_id"]==user_id), None)
    if target:
        old_role = target["role"]
        target["role"] = new_role
        save_users(users)
        await query.edit_message_text(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_role} ‚Üí {new_role}")
        try:
            await context.bot.send_message(int(user_id), f"üéâ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã {new_role}")
        except: pass
    return ConversationHandler.END

# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ ---
async def set_chief(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"]==tg_id), None)
    if not user or user["role"]!="chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ TG ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º:")
    return SET_CHIEF_USER

async def set_chief_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_chief_id = update.message.text
    users = load_users()
    target = next((u for u in users if u["tg_id"]==new_chief_id), None)
    if not target:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    target["role"] = "chief"
    target["chief_id"] = ""
    save_users(users)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_chief_id} —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∞–ª—å–Ω–∏–∫!")
    try:
        await context.bot.send_message(int(new_chief_id), "üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.")
    except: pass
    return ConversationHandler.END

# --- ConversationHandlers ---
add_user_conv = ConversationHandler(
    entry_points=[CommandHandler("add_user", add_user)],
    states={ADD_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_handler)]},
    fallbacks=[CommandHandler("cancel", lambda u,c:u.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"))]
)

set_role_conv = ConversationHandler(
    entry_points=[CommandHandler("set_role", set_role)],
    states={
        SET_ROLE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_role_user_handler)],
        SET_ROLE_CHOICE: [CallbackQueryHandler(set_role_choice_handler, pattern="^role:")]
    },
    fallbacks=[CommandHandler("cancel", lambda u,c:u.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"))]
)

set_chief_conv = ConversationHandler(
    entry_points=[CommandHandler("set_chief", set_chief)],
    states={SET_CHIEF_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_chief_user_handler)]},
    fallbacks=[CommandHandler("cancel", lambda u,c:u.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"))]
)

# --- –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á, –¥–µ–¥–ª–∞–π–Ω–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ mark_done ---
# –¢–≤–æ–π —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ConversationHandler —Å DEADLINE_DATE –∏ DEADLINE_TIME –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞

app = Application.builder().token("8377447196:AAHPqerv_P6zgKvL9GIv_4mmz4ygSK5GOGE").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(add_user_conv)
app.add_handler(set_role_conv)
app.add_handler(set_chief_conv)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
