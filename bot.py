import csv
import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger

USERS_FILE = "users.csv"
TASKS_FILE = "tasks.csv"

scheduler = BackgroundScheduler()
scheduler.start()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TASK_TEXT, CHOOSE_USER, DEADLINE, CHOOSE_USER_FOR_ROLE, CONFIRM_ROLE_CHANGE = range(5)

# --- –†–∞–±–æ—Ç–∞ —Å CSV ---
def load_csv(filename, fieldnames):
    if not os.path.exists(filename):
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
        return []
    with open(filename, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def save_csv(filename, data, fieldnames):
    with open(filename, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

def load_users():
    return load_csv(USERS_FILE, ["tg_id", "role", "chief_id"])

def save_users(users):
    save_csv(USERS_FILE, users, ["tg_id", "role", "chief_id"])

def load_tasks():
    return load_csv(TASKS_FILE, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

def save_tasks(tasks):
    save_csv(TASKS_FILE, tasks, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard(role):
    if role == "chief":
        buttons = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
    else:
        buttons = [
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö ---
async def send_deadline_reminder(context):
    task_id = context.job.data["task_id"]
    chat_id = context.job.data["chat_id"]
    task_text = context.job.data["task_text"]
    deadline = context.job.data["deadline"]
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ {deadline}"
    )

def schedule_deadline_reminders(task_id, chief_id, assignee_id, task_text, deadline_str):
    deadline = datetime.datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
    reminder_1_day = deadline - datetime.timedelta(days=1)
    if reminder_1_day > datetime.datetime.now():
        scheduler.add_job(
            send_deadline_reminder,
            DateTrigger(run_date=reminder_1_day),
            args=[task_id],
            kwargs={
                "data": {
                    "task_id": task_id,
                    "chat_id": assignee_id,
                    "task_text": task_text,
                    "deadline": deadline_str
                }
            }
        )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
    reminder_1_hour = deadline - datetime.timedelta(hours=1)
    if reminder_1_hour > datetime.datetime.now():
        scheduler.add_job(
            send_deadline_reminder,
            DateTrigger(run_date=reminder_1_hour),
            args=[task_id],
            kwargs={
                "data": {
                    "task_id": task_id,
                    "chat_id": assignee_id,
                    "task_text": task_text,
                    "deadline": deadline_str
                }
            }
        )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
    reminder_after = deadline + datetime.timedelta(hours=1)
    scheduler.add_job(
        send_deadline_reminder,
        DateTrigger(run_date=reminder_after),
        args=[task_id],
        kwargs={
            "data": {
                "task_id": task_id,
                "chat_id": chief_id,
                "task_text": task_text,
                "deadline": f"{deadline_str} (–ü–†–û–°–†–û–ß–ï–ù–û)"
            }
        }
    )

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)

    if not users:  # –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º
        new_user = {"tg_id": tg_id, "role": "chief", "chief_id": ""}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("chief")
        await update.message.reply_text(
            "üë®‚Äçüíº –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ù–ê–ß–ê–õ–¨–ù–ò–ö.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:",
            reply_markup=keyboard
        )
        return

    if not user:
        chiefs = [u for u in users if u["role"] == "chief"]
        chief_id = chiefs[0]["tg_id"] if chiefs else ""
        new_user = {"tg_id": tg_id, "role": "manager", "chief_id": chief_id}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("manager")
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ú–ï–ù–ï–î–ñ–ï–†.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏:",
            reply_markup=keyboard
        )
    else:
        keyboard = get_main_keyboard(user["role"])
        await update.message.reply_text(
            f"üîë –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã {user['role']}.",
            reply_markup=keyboard
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if user and user["role"] == "chief":
        help_text = (
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞:\n\n"
            "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É\n"
            "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö\n"
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á"
        )
    else:
        help_text = (
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n"
            "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )
    
    await update.message.reply_text(help_text)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)

    if not user or user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return TASK_TEXT

async def task_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["task_text"] = update.message.text
    tg_id = str(update.effective_user.id)
    
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id and u["role"] == "manager"]

    if not subs:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.")
        return ConversationHandler.END

    buttons = []
    for u in subs:
        buttons.append([InlineKeyboardButton(f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {u['tg_id']}", callback_data=f"assign:{u['tg_id']}")])
    
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboard)
    return CHOOSE_USER

async def assign_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    assignee_id = query.data.split(":")[1]
    context.user_data["assignee_id"] = assignee_id
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")
    return DEADLINE

async def deadline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    deadline_str = update.message.text
    try:
        deadline = datetime.datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
        if deadline <= datetime.datetime.now():
            await update.message.reply_text("‚ùå –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return DEADLINE
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (YYYY-MM-DD HH:MM):")
        return DEADLINE

    tasks = load_tasks()
    task_id = str(len(tasks) + 1)
    chief_id = str(update.effective_user.id)
    assignee_id = context.user_data["assignee_id"]
    text = context.user_data["task_text"]

    new_task = {
        "id": task_id,
        "chief_id": chief_id,
        "assignee_id": assignee_id,
        "text": text,
        "deadline": deadline_str,
        "status": "new"
    }
    tasks.append(new_task)
    save_tasks(tasks)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    schedule_deadline_reminders(task_id, chief_id, assignee_id, text, deadline_str)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–º—É
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]
    ])
    
    try:
        await context.bot.send_message(
            chat_id=int(assignee_id),
            text=f"üìù –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê\n\n{text}\n\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}",
            reply_markup=keyboard
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")
    return ConversationHandler.END

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π ---
async def change_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)

    if not user or user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.")
        return ConversationHandler.END

    subs = [u for u in users if u["chief_id"] == tg_id]
    
    if not subs:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.")
        return ConversationHandler.END

    buttons = []
    for u in subs:
        role_emoji = "üëë" if u["role"] == "chief" else "üë§"
        buttons.append([InlineKeyboardButton(f"{role_emoji} {u['tg_id']} ({u['role']})", callback_data=f"role_user:{u['tg_id']}")])
    
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:", reply_markup=keyboard)
    return CHOOSE_USER_FOR_ROLE

async def choose_user_for_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.data.split(":")[1]
    context.user_data["role_user_id"] = user_id
    
    users = load_users()
    user = next((u for u in users if u["tg_id"] == user_id), None)
    
    if not user:
        await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    current_role = user["role"]
    new_role = "manager" if current_role == "chief" else "chief"
    
    context.user_data["new_role"] = new_role
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_role:yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_role:no")]
    ])
    
    await query.edit_message_text(
        f"–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id}?\n"
        f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}\n"
        f"–ù–æ–≤–∞—è —Ä–æ–ª—å: {new_role}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    return CONFIRM_ROLE_CHANGE

async def confirm_role_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    confirmation = query.data.split(":")[1]
    
    if confirmation == "no":
        await query.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    user_id = context.user_data["role_user_id"]
    new_role = context.user_data["new_role"]
    
    users = load_users()
    user = next((u for u in users if u["tg_id"] == user_id), None)
    
    if not user:
        await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–æ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    old_role = user["role"]
    user["role"] = new_role
    save_users(users)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    try:
        role_text = "–Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º" if new_role == "chief" else "–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        await context.bot.send_message(
        chat_id=int(user_id),
        text=f"üéâ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã {role_text}.\n\n"
		f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."
	)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
    
    await query.edit_message_text(
        f"‚úÖ –†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
        f"–° {old_role} –Ω–∞ {new_role}"
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á ---
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    tasks = load_tasks()
    
    if user["role"] == "chief":
        user_tasks = [t for t in tasks if t["chief_id"] == tg_id]
        title = "üìã –ó–ê–î–ê–ß–ò, –ö–û–¢–û–†–´–ï –í–´ –°–û–ó–î–ê–õ–ò:\n\n"
    else:
        user_tasks = [t for t in tasks if t["assignee_id"] == tg_id]
        title = "üìã –í–ê–®–ò –¢–ï–ö–£–©–ò–ï –ó–ê–î–ê–ß–ò:\n\n"
    
    if not user_tasks:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á")
        return
    
    message = title
    for task in user_tasks:
        status_emoji = "‚úÖ" if task["status"] == "done" else "‚è≥"
        message += f"{status_emoji} –ó–∞–¥–∞—á–∞ #{task['id']}: {task['text']}\n"
        message += f"   ‚è∞ –î–µ–¥–ª–∞–π–Ω: {task['deadline']}\n"
        message += f"   üìä –°—Ç–∞—Ç—É—Å: {task['status']}\n\n"
    
    await update.message.reply_text(message)

async def show_completed_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user or user["role"] != "manager":
        await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
        return

    tasks = load_tasks()
    completed_tasks = [t for t in tasks if t["assignee_id"] == tg_id and t["status"] == "done"]
    
    if not completed_tasks:
        await update.message.reply_text("üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    message = "‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:\n\n"
    for task in completed_tasks:
        message += f"üéØ –ó–∞–¥–∞—á–∞ #{task['id']}: {task['text']}\n"
        message += f"   ‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}\n\n"
    
    await update.message.reply_text(message)

# --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task_id = query.data.split(":")[1]

    tasks = load_tasks()
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    task["status"] = "done"
    save_tasks(tasks)

    try:
        chief_id = int(task["chief_id"])
        await context.bot.send_message(
            chief_id,
            f"‚úÖ –ü–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π {task['assignee_id']} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É:\n\n"
            f"{task['text']}\n\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫—É: {e}")

    await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['text']}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏) ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" and user["role"] == "chief":
        await task(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        await show_tasks(update, context)
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" and user["role"] == "manager":
        await show_completed_tasks(update, context)
    elif text == "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" and user["role"] == "chief":
        subs = [u for u in users if u["chief_id"] == tg_id]
        if subs:
            message = "üë• –í–ê–®–ò –°–û–¢–†–£–î–ù–ò–ö–ò:\n\n"
            for sub in subs:
                role_emoji = "üëë" if sub["role"] == "chief" else "üë§"
                message += f"{role_emoji} ID: {sub['tg_id']} - {sub['role']}\n"
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    elif text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏" and user["role"] == "chief":
        await change_role(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Application.builder().token("8377447196:AAHPqerv_P6zgKvL9GIv_4mmz4ygSK5GOGE").build()

# ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
task_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É$"), task)],
    states={
        TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_text_handler)],
        CHOOSE_USER: [CallbackQueryHandler(assign_task, pattern="^assign:")],
        DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_handler)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

# ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π
role_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏$"), change_role)],
    states={
        CHOOSE_USER_FOR_ROLE: [CallbackQueryHandler(choose_user_for_role, pattern="^role_user:")],
        CONFIRM_ROLE_CHANGE: [CallbackQueryHandler(confirm_role_change, pattern="^confirm_role:")],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(task_conv_handler)
app.add_handler(role_conv_handler)
app.add_handler(CommandHandler("tasks", show_tasks))
app.add_handler(CallbackQueryHandler(mark_done, pattern="^done:"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()