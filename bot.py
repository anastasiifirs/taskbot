import csv
import os
import datetime
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger

USERS_FILE = "users.csv"
TASKS_FILE = "tasks.csv"

scheduler = BackgroundScheduler()
scheduler.start()

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
REGISTER_NAME, REGISTER_SURNAME, TASK_TEXT, CHOOSE_USER, DEADLINE_DATE, DEADLINE_TIME = range(6)

# --- –†–∞–±–æ—Ç–∞ —Å CSV ---
def load_csv(filename, fieldnames):
    if not os.path.exists(filename):
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
        return []
    with open(filename, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def save_csv(filename, data, fieldnames):
    with open(filename, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

def load_users():
    return load_csv(USERS_FILE, ["tg_id", "name", "surname", "role", "chief_id"])

def save_users(users):
    save_csv(USERS_FILE, users, ["tg_id", "name", "surname", "role", "chief_id"])

def load_tasks():
    return load_csv(TASKS_FILE, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

def save_tasks(tasks):
    save_csv(TASKS_FILE, tasks, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard(role):
    if role == "chief":
        buttons = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
    else:
        buttons = [
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_deadline_reminder(context):
    task_id = context.job.data["task_id"]
    chat_id = context.job.data["chat_id"]
    task_text = context.job.data["task_text"]
    deadline = context.job.data["deadline"]
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ {deadline}"
    )

def schedule_deadline_reminders(task_id, chief_id, assignee_id, task_text, deadline_str):
    deadline = datetime.datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
    reminder_1_day = deadline - datetime.timedelta(days=1)
    if reminder_1_day > datetime.datetime.now():
        scheduler.add_job(
            send_deadline_reminder,
            DateTrigger(run_date=reminder_1_day),
            kwargs={"data":{"task_id": task_id,"chat_id": assignee_id,"task_text": task_text,"deadline": deadline_str}}
        )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
    reminder_1_hour = deadline - datetime.timedelta(hours=1)
    if reminder_1_hour > datetime.datetime.now():
        scheduler.add_job(
            send_deadline_reminder,
            DateTrigger(run_date=reminder_1_hour),
            kwargs={"data":{"task_id": task_id,"chat_id": assignee_id,"task_text": task_text,"deadline": deadline_str}}
        )
    
    # –ü–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞
    reminder_after = deadline + datetime.timedelta(hours=1)
    scheduler.add_job(
        send_deadline_reminder,
        DateTrigger(run_date=reminder_after),
        kwargs={"data":{"task_id": task_id,"chat_id": chief_id,"task_text": task_text,"deadline": f"{deadline_str} (–ü–†–û–°–†–û–ß–ï–ù–û)"}}
    )

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)

    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        keyboard = get_main_keyboard(user["role"])
        await update.message.reply_text(
            f"üîë –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']} {user['surname']}! –¢—ã {user['role']}.",
            reply_markup=keyboard
        )
        return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    context.user_data["tg_id"] = tg_id
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_SURNAME

async def register_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["surname"] = update.message.text
    tg_id = context.user_data["tg_id"]
    name = context.user_data["name"]
    surname = context.user_data["surname"]
    
    users = load_users()
    
    if not users:
        # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∞–ª—å–Ω–∏–∫
        new_user = {"tg_id": tg_id, "name": name, "surname": surname, "role": "chief", "chief_id": ""}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("chief")
        await update.message.reply_text(
            f"üë®‚Äçüíº –ü—Ä–∏–≤–µ—Ç, {name} {surname}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ù–ê–ß–ê–õ–¨–ù–ò–ö.",
            reply_markup=keyboard
        )
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–µ–Ω–µ–¥–∂–µ—Ä
        chiefs = [u for u in users if u["role"] == "chief"]
        chief_id = chiefs[0]["tg_id"] if chiefs else ""
        new_user = {"tg_id": tg_id, "name": name, "surname": surname, "role": "manager", "chief_id": chief_id}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("manager")
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {name} {surname}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ú–ï–ù–ï–î–ñ–ï–†.",
            reply_markup=keyboard
        )
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    if user and user["role"] == "chief":
        help_text = ("üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞:\nüìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\nüìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\nüîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    else:
        help_text = ("üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\nüìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n‚ùì –ü–æ–º–æ—â—å")
    await update.message.reply_text(help_text)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    if not user or user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return TASK_TEXT

async def task_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["task_text"] = update.message.text
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id and u["role"] == "manager"]
    if not subs:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.")
        return ConversationHandler.END
    
    buttons = []
    for u in subs:
        buttons.append([InlineKeyboardButton(f"üë§ {u['name']} {u['surname']}", callback_data=f"assign:{u['tg_id']}")])
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_USER

async def assign_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["assignee_id"] = query.data.split(":")[1]
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
    return DEADLINE_DATE

async def deadline_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
        return DEADLINE_DATE
    
    try:
        day, month, year = map(int, date_str.split('.'))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        datetime.datetime(year, month, day)
        context.user_data["deadline_date"] = date_str
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return DEADLINE_TIME
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
        return DEADLINE_DATE

async def deadline_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:MM
    if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return DEADLINE_TIME
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        hours, minutes = map(int, time_str.split(':'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
        if hours < 0 or hours > 23 or minutes < 0 or minutes > 59:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59:")
            return DEADLINE_TIME
        
        date_str = context.user_data["deadline_date"]
        day, month, year = map(int, date_str.split('.'))
        
        deadline = datetime.datetime(year, month, day, hours, minutes)
        if deadline <= datetime.datetime.now():
            await update.message.reply_text("‚ùå –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ:")
            return DEADLINE_DATE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        tasks = load_tasks()
        task_id = str(len(tasks) + 1)
        chief_id = str(update.effective_user.id)
        assignee_id = context.user_data["assignee_id"]
        text = context.user_data["task_text"]
        deadline_str = deadline.strftime("%Y-%m-%d %H:%M")

        new_task = {
            "id": task_id, 
            "chief_id": chief_id, 
            "assignee_id": assignee_id,
            "text": text, 
            "deadline": deadline_str, 
            "status": "new"
        }
        tasks.append(new_task)
        save_tasks(tasks)

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        schedule_deadline_reminders(task_id, chief_id, assignee_id, text, deadline_str)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        users = load_users()
        assignee = next((u for u in users if u["tg_id"] == assignee_id), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else assignee_id
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]])
        try:
            await context.bot.send_message(
                int(assignee_id), 
                f"üìù –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê\n\n{text}\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=keyboard
            )
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")

        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {assignee_name}.")
        return ConversationHandler.END
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return DEADLINE_TIME

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π ---
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task_id = query.data.split(":")[1]
    tasks = load_tasks()
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    task["status"] = "done"
    save_tasks(tasks)
    
    try:
        users = load_users()
        assignee = next((u for u in users if u["tg_id"] == task["assignee_id"]), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else task["assignee_id"]
        
        await context.bot.send_message(
            int(task["chief_id"]),
            f"‚úÖ –ü–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π {assignee_name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É:\n{task['text']}\n‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}"
        )
    except:
        pass
    
    await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['text']}")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á ---
async def show_tasks(update, context):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    user_tasks = [t for t in tasks if t["assignee_id"] == tg_id or t["chief_id"] == tg_id]
    
    if not user_tasks:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á")
        return
    
    users = load_users()
    msg = ""
    for t in user_tasks:
        status = "‚úÖ" if t["status"] == "done" else "‚è≥"
        assignee = next((u for u in users if u["tg_id"] == t["assignee_id"]), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else t["assignee_id"]
        
        deadline_dt = datetime.datetime.strptime(t["deadline"], "%Y-%m-%d %H:%M")
        deadline_str = deadline_dt.strftime("%d.%m.%Y %H:%M")
        
        msg += f"{status} –ó–∞–¥–∞—á–∞ #{t['id']}\n"
        msg += f"üìù {t['text']}\n"
        msg += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}\n"
        msg += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        msg += f"üìä –°—Ç–∞—Ç—É—Å: {t['status']}\n\n"
    
    await update.message.reply_text(msg)

async def show_completed_tasks(update, context):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    completed = [t for t in tasks if t["assignee_id"] == tg_id and t["status"] == "done"]
    
    if not completed:
        await update.message.reply_text("üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    msg = "‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:\n\n"
    for t in completed:
        deadline_dt = datetime.datetime.strptime(t["deadline"], "%Y-%m-%d %H:%M")
        deadline_str = deadline_dt.strftime("%d.%m.%Y %H:%M")
        msg += f"üéØ –ó–∞–¥–∞—á–∞ #{t['id']}: {t['text']}\n‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {deadline_str}\n\n"
    
    await update.message.reply_text(msg)

# --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
async def show_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id]
    
    if not subs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    else:
        message = "üë• –í–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n"
        for sub in subs:
            role_emoji = "üëë" if sub["role"] == "chief" else "üë§"
            message += f"{role_emoji} {sub['name']} {sub['surname']} (ID: {sub['tg_id']}) - {sub['role']}\n"
        await update.message.reply_text(message)

async def change_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id]
    
    if not subs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π")
        return
    
    await update.message.reply_text("üîÑ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    user_tasks = [t for t in tasks if t["chief_id"] == tg_id]
    
    if not user_tasks:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    total_tasks = len(user_tasks)
    completed_tasks = len([t for t in user_tasks if t["status"] == "done"])
    pending_tasks = total_tasks - completed_tasks
    
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    message += f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
    message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
    message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {pending_tasks}\n"
    message += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {round((completed_tasks/total_tasks)*100 if total_tasks > 0 else 0)}%"
    
    await update.message.reply_text(message)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ ConversationHandler
    if context.user_data.get('_conversation_state'):
        return
    
    text = update.message.text
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ /start")
        return
        
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" and user["role"] == "chief":
        await task(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        await show_tasks(update, context)
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" and user["role"] == "manager":
        await show_completed_tasks(update, context)
    elif text == "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" and user["role"] == "chief":
        await show_employees(update, context)
    elif text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏" and user["role"] == "chief":
        await change_role(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user["role"] == "chief":
        await show_statistics(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

# ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
register_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
        REGISTER_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_surname)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

# ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
task_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É$"), task)],
    states={
        TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_text_handler)],
        CHOOSE_USER: [CallbackQueryHandler(assign_task, pattern="^assign:")],
        DEADLINE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_date_handler)],
        DEADLINE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_time_handler)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(register_conv_handler)
app.add_handler(CommandHandler("help", help_command))
app.add_handler(task_conv_handler)
app.add_handler(CallbackQueryHandler(mark_done, pattern="^done:"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
