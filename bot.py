import csv
import os
import datetime
import re
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –§–∞–π–ª—ã ----------
USERS_FILE = "users.csv"
TASKS_FILE = "tasks.csv"

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ----------
REGISTER_NAME, REGISTER_SURNAME, TASK_TEXT, CHOOSE_USER, DEADLINE_DATE, DEADLINE_TIME, \
CHOOSE_USER_FOR_ROLE, CONFIRM_ROLE_CHANGE = range(8)

# ---------- CSV ----------
def load_csv(filename, fieldnames):
    if not os.path.exists(filename):
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
        return []
    with open(filename, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def save_csv(filename, data, fieldnames):
    with open(filename, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

def load_users():
    return load_csv(USERS_FILE, ["tg_id", "name", "surname", "role", "chief_id"])

def save_users(users):
    save_csv(USERS_FILE, users, ["tg_id", "name", "surname", "role", "chief_id"])

def load_tasks():
    return load_csv(TASKS_FILE, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

def save_tasks(tasks):
    save_csv(TASKS_FILE, tasks, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_main_keyboard(role):
    if role == "chief":
        buttons = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
    else:
        buttons = [
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------
async def send_deadline_reminder(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    task_id = str(data.get("task_id"))
    tasks = load_tasks()
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task or task.get("status") == "done":
        return
    chat_id = int(data["chat_id"])
    task_text = data["task_text"]
    deadline_display = data["deadline"]
    
    if data.get("role") == "assignee":
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]])
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ {deadline_display}",
            reply_markup=keyboard
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û: –ó–∞–¥–∞—á–∞ '{task_text}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫ {deadline_display}"
        )

def schedule_deadline_reminders(application: Application, task_id: str, chief_id: int, assignee_id: int,
                               task_text: str, deadline_dt: datetime.datetime):
    now = datetime.datetime.now()
    jobq = application.job_queue
    
    reminders = [
        (deadline_dt - datetime.timedelta(days=1), "assignee", assignee_id),
        (deadline_dt - datetime.timedelta(hours=1), "assignee", assignee_id),
        (deadline_dt + datetime.timedelta(hours=1), "chief", chief_id)
    ]
    
    for reminder_time, role, chat_id in reminders:
        if reminder_time > now:
            jobq.run_once(
                send_deadline_reminder,
                when=reminder_time,
                data={
                    "task_id": task_id,
                    "chat_id": chat_id,
                    "task_text": task_text,
                    "deadline": deadline_dt.strftime("%d.%m.%Y %H:%M"),
                    "role": role
                }
            )

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if user:
        keyboard = get_main_keyboard(user["role"])
        await update.message.reply_text(
            f"üîë –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']} {user['surname']}! –¢—ã {user['role']}.",
            reply_markup=keyboard
        )
        return ConversationHandler.END
    
    context.user_data["tg_id"] = tg_id
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_SURNAME

async def register_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text.strip()
    context.user_data["surname"] = surname
    tg_id = context.user_data["tg_id"]
    name = context.user_data["name"]
    
    users = load_users()
    
    if not users:
        new_user = {"tg_id": tg_id, "name": name, "surname": surname, "role": "chief", "chief_id": ""}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("chief")
        await update.message.reply_text(
            f"üë®‚Äçüíº –ü—Ä–∏–≤–µ—Ç, {name} {surname}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ù–ê–ß–ê–õ–¨–ù–ò–ö.",
            reply_markup=keyboard
        )
    else:
        chiefs = [u for u in users if u["role"] == "chief"]
        chief_id = chiefs[0]["tg_id"] if chiefs else ""
        new_user = {"tg_id": tg_id, "name": name, "surname": surname, "role": "manager", "chief_id": chief_id}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("manager")
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {name} {surname}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ú–ï–ù–ï–î–ñ–ï–†.",
            reply_markup=keyboard
        )
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if user and user["role"] == "chief":
        help_text = (
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞:\n"
            "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
            "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
            "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö\n"
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á"
        )
    else:
        help_text = (
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n"
            "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )
    
    await update.message.reply_text(help_text)

# ---------- Task handlers ----------
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user or user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
        return ConversationHandler.END
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return TASK_TEXT

async def task_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["task_text"] = update.message.text.strip()
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id and u["role"] == "manager"]
    
    if not subs:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.")
        return ConversationHandler.END
    
    buttons = []
    for u in subs:
        buttons.append([InlineKeyboardButton(f"üë§ {u['name']} {u['surname']}", callback_data=f"assign:{u['tg_id']}")])
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_USER

async def assign_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    assignee_id = query.data.split(":")[1]
    context.user_data["assignee_id"] = assignee_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
    return DEADLINE_DATE

async def deadline_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
        return DEADLINE_DATE
    
    try:
        day, month, year = map(int, date_str.split('.'))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        datetime.datetime(year, month, day)
        context.user_data["deadline_date"] = date_str
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 9:00):")
        return DEADLINE_TIME
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
        return DEADLINE_DATE

async def deadline_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è: '{time_str}'")
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
        if ':' not in time_str:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            return DEADLINE_TIME
        
        parts = time_str.split(':')
        if len(parts) != 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            return DEADLINE_TIME
        
        hours = int(parts[0])
        minutes = int(parts[1])
        
        logger.info(f"–†–∞–∑–æ–±—Ä–∞–Ω–æ: hours={hours}, minutes={minutes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if hours < 0 or hours > 23:
            await update.message.reply_text("‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23:")
            return DEADLINE_TIME
        
        if minutes < 0 or minutes > 59:
            await update.message.reply_text("‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59:")
            return DEADLINE_TIME
        
        date_str = context.user_data.get("deadline_date")
        if not date_str:
            logger.error("–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ context.user_data")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        logger.info(f"–î–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: '{date_str}'")
        
        day, month, year = map(int, date_str.split('.'))
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
        deadline_dt = datetime.datetime(year, month, day, hours, minutes)
        now = datetime.datetime.now()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω deadline_dt: {deadline_dt}, now: {now}")
        
        if deadline_dt <= now:
            await update.message.reply_text("‚ùå –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ:")
            return DEADLINE_DATE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        tasks = load_tasks()
        task_id = str(len(tasks) + 1)
        chief_id = str(update.effective_user.id)
        assignee_id = context.user_data.get("assignee_id")
        text = context.user_data.get("task_text", "")
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: chief_id={chief_id}, assignee_id={assignee_id}, text={text}")
        
        if not assignee_id or not text:
            logger.error("–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        deadline_str = deadline_dt.strftime("%Y-%m-%d %H:%M")

        new_task = {
            "id": task_id,
            "chief_id": chief_id,
            "assignee_id": assignee_id,
            "text": text,
            "deadline": deadline_str,
            "status": "new"
        }
        tasks.append(new_task)
        save_tasks(tasks)
        logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {new_task}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        try:
            schedule_deadline_reminders(
                context.application, 
                task_id, 
                int(chief_id), 
                int(assignee_id), 
                text, 
                deadline_dt
            )
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        users = load_users()
        assignee = next((u for u in users if u["tg_id"] == assignee_id), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else assignee_id
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]])
        
        try:
            await context.bot.send_message(
                int(assignee_id),
                f"üìù –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê\n\n{text}\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_dt.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=keyboard
            )
            logger.info(f"–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {assignee_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for key in ["task_text", "assignee_id", "deadline_date"]:
            context.user_data.pop(key, None)
        
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {assignee_name}.")
        return ConversationHandler.END
        
    except ValueError as e:
        logger.error(f"ValueError –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return DEADLINE_TIME
    except Exception as e:
        logger.error(f"–û–ë–©–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return DEADLINE_TIME

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π ---
async def change_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user or user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.")
        return ConversationHandler.END
    
    subs = [u for u in users if u["chief_id"] == tg_id]
    
    if not subs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π.")
        return ConversationHandler.END
    
    buttons = []
    for u in subs:
        role_emoji = "üëë" if u["role"] == "chief" else "üë§"
        buttons.append([InlineKeyboardButton(
            f"{role_emoji} {u['name']} {u['surname']} ({u['role']})", 
            callback_data=f"role_user:{u['tg_id']}"
        )])
    
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:",
        reply_markup=keyboard
    )
    return CHOOSE_USER_FOR_ROLE

async def choose_user_for_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.split(":")[1]
    context.user_data["role_user_id"] = user_id
    
    users = load_users()
    user = next((u for u in users if u["tg_id"] == user_id), None)
    
    if not user:
        await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    current_role = user["role"]
    new_role = "manager" if current_role == "chief" else "chief"
    
    context.user_data["new_role"] = new_role
    context.user_data["current_role"] = current_role
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_role:yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_role:no")]
    ])
    
    await query.edit_message_text(
        f"–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user['name']} {user['surname']}?\n"
        f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}\n"
        f"–ù–æ–≤–∞—è —Ä–æ–ª—å: {new_role}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    return CONFIRM_ROLE_CHANGE

async def confirm_role_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    confirmation = query.data.split(":")[1]
    
    if confirmation == "no":
        await query.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    user_id = context.user_data["role_user_id"]
    new_role = context.user_data["new_role"]
    current_role = context.user_data["current_role"]
    
    users = load_users()
    user = next((u for u in users if u["tg_id"] == user_id), None)
    
    if not user:
        await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–æ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    old_role = user["role"]
    user["role"] = new_role
    save_users(users)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    try:
        role_text = "–Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º" if new_role == "chief" else "–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        await context.bot.send_message(
            chat_id=int(user_id),
            text=f"üéâ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã {role_text}.\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
    
    await query.edit_message_text(
        f"‚úÖ –†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user['name']} {user['surname']} –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
        f"–° {old_role} –Ω–∞ {new_role}"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for key in ["role_user_id", "new_role", "current_role"]:
        context.user_data.pop(key, None)
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# ---------- Mark task as done ----------
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    task_id = query.data.split(":")[1]
    tasks = load_tasks()
    task = next((t for t in tasks if t["id"] == task_id), None)
    
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    task["status"] = "done"
    save_tasks(tasks)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞
    try:
        users = load_users()
        assignee = next((u for u in users if u["tg_id"] == task["assignee_id"]), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else task["assignee_id"]
        
        await context.bot.send_message(
            int(task["chief_id"]),
            f"‚úÖ –ü–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π {assignee_name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É:\n{task['text']}\n‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫—É: {e}")
    
    await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['text']}")

# ---------- Other functions ----------
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    user_tasks = [t for t in tasks if t["assignee_id"] == tg_id or t["chief_id"] == tg_id]
    
    if not user_tasks:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á")
        return
    
    users = load_users()
    msg = ""
    for t in user_tasks:
        status = "‚úÖ" if t["status"] == "done" else "‚è≥"
        assignee = next((u for u in users if u["tg_id"] == t["assignee_id"]), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else t["assignee_id"]
        
        deadline_dt = datetime.datetime.strptime(t["deadline"], "%Y-%m-%d %H:%M")
        deadline_str = deadline_dt.strftime("%d.%m.%Y %H:%M")
        
        msg += f"{status} –ó–∞–¥–∞—á–∞ #{t['id']}\n"
        msg += f"üìù {t['text']}\n"
        msg += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}\n"
        msg += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        msg += f"üìä –°—Ç–∞—Ç—É—Å: {t['status']}\n\n"
    
    await update.message.reply_text(msg)

async def show_completed_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    completed = [t for t in tasks if t["assignee_id"] == tg_id and t["status"] == "done"]
    
    if not completed:
        await update.message.reply_text("üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    msg = "‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:\n\n"
    for t in completed:
        deadline_dt = datetime.datetime.strptime(t["deadline"], "%Y-%m-%d %H:%M")
        deadline_str = deadline_dt.strftime("%d.%m.%Y %H:%M")
        msg += f"üéØ –ó–∞–¥–∞—á–∞ #{t['id']}: {t['text']}\n‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {deadline_str}\n\n"
    
    await update.message.reply_text(msg)

async def show_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id]
    
    if not subs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    else:
        message = "üë• –í–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n"
        for sub in subs:
            role_emoji = "üëë" if sub["role"] == "chief" else "üë§"
            message += f"{role_emoji} {sub['name']} {sub['surname']} - {sub['role']}\n"
        await update.message.reply_text(message)

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    user_tasks = [t for t in tasks if t["chief_id"] == tg_id]
    
    if not user_tasks:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    total_tasks = len(user_tasks)
    completed_tasks = len([t for t in user_tasks if t["status"] == "done"])
    pending_tasks = total_tasks - completed_tasks
    
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    message += f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
    message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
    message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {pending_tasks}\n"
    message += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {round((completed_tasks/total_tasks)*100 if total_tasks > 0 else 0)}%"
    
    await update.message.reply_text(message)

# ---------- Text message handler ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ /start")
        return
    
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" and user["role"] == "chief":
        await task(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        await show_tasks(update, context)
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" and user["role"] == "manager":
        await show_completed_tasks(update, context)
    elif text == "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" and user["role"] == "chief":
        await show_employees(update, context)
    elif text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏" and user["role"] == "chief":
        await change_role(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user["role"] == "chief":
        await show_statistics(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# ---------- MAIN ----------
def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN not found in environment variables.")
        return
    
    app = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    register_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_surname)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É$"), task)],
        states={
            TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_text_handler)],
            CHOOSE_USER: [CallbackQueryHandler(assign_task, pattern="^assign:")],
            DEADLINE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_date_handler)],
            DEADLINE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_time_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π (–î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö)
    role_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏$"), change_role)],
        states={
            CHOOSE_USER_FOR_ROLE: [CallbackQueryHandler(choose_user_for_role, pattern="^role_user:")],
            CONFIRM_ROLE_CHANGE: [CallbackQueryHandler(confirm_role_change, pattern="^confirm_role:")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–î–û–ë–ê–í–¨–¢–ï role_conv)
    app.add_handler(register_conv)
    app.add_handler(task_conv)
    app.add_handler(role_conv)  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£
    app.add_handler(CallbackQueryHandler(mark_done, pattern="^done:"))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
