import csv
import os
import datetime
import re
import logging
from zoneinfo import ZoneInfo  # Python 3.9+
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / —Ñ–∞–π–ª—ã ----------
USERS_FILE = "users.csv"
TASKS_FILE = "tasks.csv"

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Europe/Paris (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª–∞)
TZ = ZoneInfo("Europe/Paris")

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
REGISTER_NAME, REGISTER_SURNAME, TASK_TEXT, CHOOSE_USER, DEADLINE_DATE, DEADLINE_TIME = range(6)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CSV ----------
def load_csv(filename, fieldnames):
    if not os.path.exists(filename):
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
        return []
    with open(filename, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def save_csv(filename, data, fieldnames):
    with open(filename, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

def load_users():
    return load_csv(USERS_FILE, ["tg_id", "name", "surname", "role", "chief_id"])

def save_users(users):
    save_csv(USERS_FILE, users, ["tg_id", "name", "surname", "role", "chief_id"])

def load_tasks():
    # deadline —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-18T22:20:00+02:00)
    return load_csv(TASKS_FILE, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

def save_tasks(tasks):
    save_csv(TASKS_FILE, tasks, ["id", "chief_id", "assignee_id", "text", "deadline", "status"])

# ---------- UI / –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_main_keyboard(role):
    if role == "chief":
        buttons = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
    else:
        buttons = [
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (job_queue PTB) ----------
async def send_deadline_reminder(context: ContextTypes.DEFAULT_TYPE):
    """
    context.job.data {'task_id','chat_id','task_text','deadline','role'}
    role: 'assignee' –∏–ª–∏ 'chief' (–¥–ª—è after-deadline)
    """
    try:
        data = context.job.data
        task_id = str(data.get("task_id"))
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –≥–æ–Ω–æ–∫
        tasks = load_tasks()
        task = next((t for t in tasks if t["id"] == task_id), None)
        if not task:
            logger.info("send_deadline_reminder: –∑–∞–¥–∞—á–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", task_id)
            return
        if task.get("status") == "done":
            logger.info("send_deadline_reminder: –∑–∞–¥–∞—á–∞ %s —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.", task_id)
            return

        chat_id = int(data["chat_id"])
        task_text = data["task_text"]
        deadline_display = data["deadline"]
        # –î–ª—è assignee –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        if data.get("role") == "assignee":
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]])
            await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ {deadline_display}", reply_markup=keyboard)
        else:
            # –Ω–∞—á–∞–ª—å–Ω–∏–∫—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û: –ó–∞–¥–∞—á–∞ '{task_text}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫ {deadline_display}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ send_deadline_reminder: %s", e)

def schedule_deadline_reminders_via_jobqueue(application: Application, task_id: str, chief_id: int, assignee_id: int, task_text: str, deadline_dt: datetime.datetime):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ application.job_queue.
    deadline_dt ‚Äî timezone-aware datetime (–≤ TZ).
    """
    jobq = application.job_queue
    now = datetime.datetime.now(TZ)

    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
    r1 = deadline_dt - datetime.timedelta(days=1)
    if r1 > now:
        jobq.run_once(send_deadline_reminder, when=r1, data={
            "task_id": task_id,
            "chat_id": assignee_id,
            "task_text": task_text,
            "deadline": deadline_dt.strftime("%d.%m.%Y %H:%M"),
            "role": "assignee"
        })

    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
    r2 = deadline_dt - datetime.timedelta(hours=1)
    if r2 > now:
        jobq.run_once(send_deadline_reminder, when=r2, data={
            "task_id": task_id,
            "chat_id": assignee_id,
            "task_text": task_text,
            "deadline": deadline_dt.strftime("%d.%m.%Y %H:%M"),
            "role": "assignee"
        })

    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
    r3 = deadline_dt + datetime.timedelta(hours=1)
    if r3 > now:
        jobq.run_once(send_deadline_reminder, when=r3, data={
            "task_id": task_id,
            "chat_id": chief_id,
            "task_text": task_text,
            "deadline": deadline_dt.strftime("%d.%m.%Y %H:%M"),
            "role": "chief"
        })

def reload_reminders(application: Application):
    """
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    tasks = load_tasks()
    now = datetime.datetime.now(TZ)
    for t in tasks:
        try:
            if t.get("status") == "done":
                continue
            # deadline —Ö—Ä–∞–Ω–∏—Ç—Å—è ISO
            dl = t.get("deadline")
            if not dl:
                continue
            # fromisoformat –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ, –Ω–æ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å naive. –ü–æ–ø—Ä–æ–±—É–µ–º:
            try:
                deadline_dt = datetime.datetime.fromisoformat(dl)
            except Exception:
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: parse as "%Y-%m-%d %H:%M"
                deadline_dt = datetime.datetime.strptime(dl, "%Y-%m-%d %H:%M")
                deadline_dt = deadline_dt.replace(tzinfo=TZ)

            # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ ‚Äî –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if deadline_dt > now:
                schedule_deadline_reminders_via_jobqueue(application, t["id"], int(t["chief_id"]), int(t["assignee_id"]), t["text"], deadline_dt)
            else:
                # –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ done ‚Äî –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É —Å–µ–π—á–∞—Å
                pass
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ %s: %s", t.get("id"), e)

# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    if user:
        keyboard = get_main_keyboard(user["role"])
        await update.message.reply_text(f"üîë –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']} {user['surname']}! –¢—ã {user['role']}.", reply_markup=keyboard)
        return ConversationHandler.END

    # –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    context.user_data["conversation_active"] = True
    context.user_data["tg_id"] = tg_id
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_SURNAME

async def register_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text.strip()
    context.user_data["surname"] = surname
    tg_id = context.user_data.get("tg_id")
    name = context.user_data.get("name")

    users = load_users()
    if not users:
        new_user = {"tg_id": tg_id, "name": name, "surname": surname, "role": "chief", "chief_id": ""}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("chief")
        await update.message.reply_text(f"üë®‚Äçüíº –ü—Ä–∏–≤–µ—Ç, {name} {surname}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ù–ê–ß–ê–õ–¨–ù–ò–ö.", reply_markup=keyboard)
    else:
        chiefs = [u for u in users if u["role"] == "chief"]
        chief_id = chiefs[0]["tg_id"] if chiefs else ""
        new_user = {"tg_id": tg_id, "name": name, "surname": surname, "role": "manager", "chief_id": chief_id}
        users.append(new_user)
        save_users(users)
        keyboard = get_main_keyboard("manager")
        await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {name} {surname}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ú–ï–ù–ï–î–ñ–ï–†.", reply_markup=keyboard)

    # –æ—á–∏—Å—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤
    context.user_data.pop("tg_id", None)
    context.user_data.pop("name", None)
    context.user_data.pop("surname", None)
    context.user_data["conversation_active"] = False
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    if user and user["role"] == "chief":
        help_text = ("üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞:\n"
                     "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\nüìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\nüîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                     "/add_user <tg_id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                     "/set_role <tg_id> <chief|manager> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n"
                     "/set_chief <tg_id> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º")
    else:
        help_text = ("üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n"
                     "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n‚ùì –ü–æ–º–æ—â—å")
    await update.message.reply_text(help_text)

# ---------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ----------
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    if not user or user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
        return ConversationHandler.END
    context.user_data["conversation_active"] = True
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return TASK_TEXT

async def task_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["task_text"] = update.message.text.strip()
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id and u["role"] == "manager"]
    if not subs:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.")
        context.user_data["conversation_active"] = False
        return ConversationHandler.END

    buttons = [[InlineKeyboardButton(f"üë§ {u['name']} {u['surname']}", callback_data=f"assign:{u['tg_id']}")] for u in subs]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_USER

async def assign_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    assignee_id = query.data.split(":")[1]
    context.user_data["assignee_id"] = assignee_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
    return DEADLINE_DATE

async def deadline_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025):")
        return DEADLINE_DATE
    try:
        day, month, year = map(int, date_str.split('.'))
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        dt = datetime.datetime(year, month, day)
        context.user_data["deadline_date"] = date_str
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return DEADLINE_TIME
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return DEADLINE_DATE

async def deadline_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return DEADLINE_TIME
    try:
        hours, minutes = map(int, time_str.split(':'))
        date_str = context.user_data.get("deadline_date")
        day, month, year = map(int, date_str.split('.'))
        # timezone-aware datetime in TZ
        deadline_dt = datetime.datetime(year, month, day, hours, minutes, tzinfo=TZ)
        now = datetime.datetime.now(TZ)
        if deadline_dt <= now:
            await update.message.reply_text("‚ùå –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ:")
            return DEADLINE_DATE

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É (deadline –≤ ISO)
        tasks = load_tasks()
        task_id = str(len(tasks) + 1)
        chief_id = str(update.effective_user.id)
        assignee_id = context.user_data.get("assignee_id")
        text = context.user_data.get("task_text", "").strip()
        deadline_iso = deadline_dt.isoformat()

        new_task = {
            "id": task_id,
            "chief_id": chief_id,
            "assignee_id": assignee_id,
            "text": text,
            "deadline": deadline_iso,
            "status": "new"
        }
        tasks.append(new_task)
        save_tasks(tasks)

        # –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ job_queue (application –¥–æ—Å—Ç—É–ø–µ–Ω –≤ context)
        try:
            schedule_deadline_reminders_via_jobqueue(context.application, task_id, int(chief_id), int(assignee_id), text, deadline_dt)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %s", e)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        users = load_users()
        assignee = next((u for u in users if u["tg_id"] == assignee_id), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else assignee_id

        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]])
        try:
            await context.bot.send_message(int(assignee_id), f"üìù –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê\n\n{text}\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_dt.strftime('%d.%m.%Y %H:%M')}", reply_markup=keyboard)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: %s", e)
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")

        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {assignee_name}.")
        context.user_data.pop("task_text", None)
        context.user_data.pop("assignee_id", None)
        context.user_data.pop("deadline_date", None)
        context.user_data["conversation_active"] = False
        return ConversationHandler.END

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ deadline_time_handler: %s", e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return DEADLINE_TIME

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["conversation_active"] = False
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# ---------- –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ----------
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        task_id = query.data.split(":")[1]
        tasks = load_tasks()
        task = next((t for t in tasks if t["id"] == task_id), None)
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if task.get("status") == "done":
            await query.edit_message_text("‚ÑπÔ∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            return

        task["status"] = "done"
        save_tasks(tasks)

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞
        try:
            users = load_users()
            assignee = next((u for u in users if u["tg_id"] == task["assignee_id"]), None)
            assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else task["assignee_id"]
            await context.bot.send_message(int(task["chief_id"]), f"‚úÖ –ü–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π {assignee_name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É:\n{task['text']}\n‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.")
        await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['text']}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ mark_done: %s", e)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.")

# ---------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á ----------
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    user_tasks = [t for t in tasks if t["assignee_id"] == tg_id or t["chief_id"] == tg_id]
    if not user_tasks:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á")
        return
    users = load_users()
    msg = ""
    for t in user_tasks:
        status = "‚úÖ" if t["status"] == "done" else "‚è≥"
        assignee = next((u for u in users if u["tg_id"] == t["assignee_id"]), None)
        assignee_name = f"{assignee['name']} {assignee['surname']}" if assignee else t["assignee_id"]
        try:
            deadline_dt = datetime.datetime.fromisoformat(t["deadline"])
        except Exception:
            deadline_dt = datetime.datetime.strptime(t["deadline"], "%Y-%m-%d %H:%M")
            deadline_dt = deadline_dt.replace(tzinfo=TZ)
        deadline_str = deadline_dt.strftime("%d.%m.%Y %H:%M")
        msg += f"{status} –ó–∞–¥–∞—á–∞ #{t['id']}\nüìù {t['text']}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\nüìä –°—Ç–∞—Ç—É—Å: {t['status']}\n\n"
    await update.message.reply_text(msg)

async def show_completed_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    tasks = load_tasks()
    completed = [t for t in tasks if t["assignee_id"] == tg_id and t["status"] == "done"]
    if not completed:
        await update.message.reply_text("üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    msg = "‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:\n\n"
    for t in completed:
        try:
            deadline_dt = datetime.datetime.fromisoformat(t["deadline"])
        except Exception:
            deadline_dt = datetime.datetime.strptime(t["deadline"], "%Y-%m-%d %H:%M")
            deadline_dt = deadline_dt.replace(tzinfo=TZ)
        deadline_str = deadline_dt.strftime("%d.%m.%Y %H:%M")
        msg += f"üéØ –ó–∞–¥–∞—á–∞ #{t['id']}: {t['text']}\n‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {deadline_str}\n\n"
    await update.message.reply_text(msg)

# ---------- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ / —Ä–æ–ª–∏ ----------
async def show_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id]
    if not subs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return
    message = "üë• –í–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n"
    for sub in subs:
        role_emoji = "üëë" if sub["role"] == "chief" else "üë§"
        message += f"{role_emoji} {sub['name']} {sub['surname']} (ID: {sub['tg_id']}) - {sub['role']}\n"
    await update.message.reply_text(message)

async def change_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = str(update.effective_user.id)
    users = load_users()
    subs = [u for u in users if u["chief_id"] == tg_id]
    if not subs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π")
        return
    buttons = [[InlineKeyboardButton(f"{s['name']} {s['surname']} ({s['role']})", callback_data=f"role:{s['tg_id']}")] for s in subs]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å (manager <-> chief):", reply_markup=InlineKeyboardMarkup(buttons))

async def change_role_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.data.split(":")[1]
    users = load_users()
    target = next((u for u in users if u["tg_id"] == user_id), None)
    if not target:
        await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    old_role = target["role"]
    target["role"] = "chief" if old_role == "manager" else "manager"
    if target["role"] == "chief":
        target["chief_id"] = ""
    save_users(users)
    await query.edit_message_text(f"‚úÖ –†–æ–ª—å {target['name']} {target['surname']} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_role} ‚Üí {target['role']}")

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ –∏–¥—ë—Ç Conversation ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    if context.user_data.get("conversation_active"):
        return
    text = update.message.text
    tg_id = str(update.effective_user.id)
    users = load_users()
    user = next((u for u in users if u["tg_id"] == tg_id), None)
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ /start")
        return
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" and user["role"] == "chief":
        return await task(update, context)
    if text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        await show_tasks(update, context)
        return
    if text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" and user["role"] == "manager":
        await show_completed_tasks(update, context)
        return
    if text == "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" and user["role"] == "chief":
        await show_employees(update, context)
        return
    if text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏" and user["role"] == "chief":
        await change_role(update, context)
        return
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user["role"] == "chief":
        # –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        tasks = load_tasks()
        user_tasks = [t for t in tasks if t["chief_id"] == tg_id]
        total = len(user_tasks)
        done = len([t for t in user_tasks if t["status"] == "done"])
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ: {total}\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\n‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {total - done}")
        return
    if text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return
    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# ---------- –î–æ–ø. –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø—Ä–æ—Å—Ç—ã–µ) ----------
async def add_user_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ /add_user <tg_id> <name> <surname> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥ —Ç–µ–∫—É—â–∏–º chief """
    caller = str(update.effective_user.id)
    users = load_users()
    caller_user = next((u for u in users if u["tg_id"] == caller), None)
    if not caller_user or caller_user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <tg_id> <name> <surname>")
        return
    tg_id_new = args[0]
    name = args[1]
    surname = " ".join(args[2:])
    if any(u["tg_id"] == tg_id_new for u in users):
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º tg_id —É–∂–µ –µ—Å—Ç—å.")
        return
    users.append({"tg_id": tg_id_new, "name": name, "surname": surname, "role": "manager", "chief_id": caller})
    save_users(users)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} {surname} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä (ID {tg_id_new}).")

async def set_role_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ /set_role <tg_id> <chief|manager> """
    caller = str(update.effective_user.id)
    users = load_users()
    caller_user = next((u for u in users if u["tg_id"] == caller), None)
    if not caller_user or caller_user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.")
        return
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role <tg_id> <chief|manager>")
        return
    tg_id_target, new_role = args[0], args[1].lower()
    if new_role not in ("chief", "manager"):
        await update.message.reply_text("–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å chief –∏–ª–∏ manager.")
        return
    users = load_users()
    target = next((u for u in users if u["tg_id"] == tg_id_target), None)
    if not target:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    old = target["role"]
    target["role"] = new_role
    if new_role == "chief":
        target["chief_id"] = ""
    save_users(users)
    await update.message.reply_text(f"‚úÖ –†–æ–ª—å {tg_id_target} –∏–∑–º–µ–Ω–µ–Ω–∞: {old} ‚Üí {new_role}")

async def set_chief_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ /set_chief <tg_id> ‚Äî –¥–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º (role -> chief) """
    caller = str(update.effective_user.id)
    users = load_users()
    caller_user = next((u for u in users if u["tg_id"] == caller), None)
    if not caller_user or caller_user["role"] != "chief":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞.")
        return
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_chief <tg_id>")
        return
    tg_id_target = args[0]
    users = load_users()
    target = next((u for u in users if u["tg_id"] == tg_id_target), None)
    if not target:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    target["role"] = "chief"
    target["chief_id"] = ""
    save_users(users)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id_target} —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∞–ª—å–Ω–∏–∫.")

# ---------- MAIN (Railway ready) ----------
def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN not found in environment variables.")
        return

    app = Application.builder().token(token).build()

    # Registration conversation
    register_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_surname)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True
    )

    # Task creation conversation
    task_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É$"), task)],
        states={
            TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_text_handler)],
            CHOOSE_USER: [CallbackQueryHandler(assign_task, pattern="^assign:")],
            DEADLINE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_date_handler)],
            DEADLINE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_time_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(register_conv)
    app.add_handler(task_conv)
    app.add_handler(CallbackQueryHandler(mark_done, pattern="^done:"))
    app.add_handler(CallbackQueryHandler(change_role_callback, pattern="^role:"))

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add_user", add_user_cmd))
    app.add_handler(CommandHandler("set_role", set_role_cmd))
    app.add_handler(CommandHandler("set_chief", set_chief_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    try:
        reload_reminders(app)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %s", e)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
